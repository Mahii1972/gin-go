// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO employees (first_name, last_name, email, hire_date, salary)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, first_name, last_name, email, hire_date, salary
`

type CreateEmployeeParams struct {
	FirstName string
	LastName  string
	Email     string
	HireDate  pgtype.Date
	Salary    pgtype.Numeric
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (Employee, error) {
	row := q.db.QueryRow(ctx, createEmployee,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.HireDate,
		arg.Salary,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HireDate,
		&i.Salary,
	)
	return i, err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE FROM employees
WHERE id = $1
`

func (q *Queries) DeleteEmployee(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteEmployee, id)
	return err
}

const getEmployee = `-- name: GetEmployee :one
SELECT id, first_name, last_name, email, hire_date, salary FROM employees 
WHERE id = $1
`

func (q *Queries) GetEmployee(ctx context.Context, id int32) (Employee, error) {
	row := q.db.QueryRow(ctx, getEmployee, id)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HireDate,
		&i.Salary,
	)
	return i, err
}

const listEmployees = `-- name: ListEmployees :many
SELECT id, first_name, last_name, email, hire_date, salary FROM employees
ORDER BY last_name, first_name
`

func (q *Queries) ListEmployees(ctx context.Context) ([]Employee, error) {
	rows, err := q.db.Query(ctx, listEmployees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employee
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.HireDate,
			&i.Salary,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployee = `-- name: UpdateEmployee :one
UPDATE employees
SET first_name = $2,
    last_name = $3,
    email = $4,
    hire_date = $5,
    salary = $6
WHERE id = $1
RETURNING id, first_name, last_name, email, hire_date, salary
`

type UpdateEmployeeParams struct {
	ID        int32
	FirstName string
	LastName  string
	Email     string
	HireDate  pgtype.Date
	Salary    pgtype.Numeric
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) (Employee, error) {
	row := q.db.QueryRow(ctx, updateEmployee,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.HireDate,
		arg.Salary,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HireDate,
		&i.Salary,
	)
	return i, err
}
